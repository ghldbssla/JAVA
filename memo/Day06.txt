배열
	같은 자료형의 여러 변수를 나열해 놓는 것
	product1, product2, product3, ...
	String[] arProduct = {"흰티",...};	

배열의 선언
	자료형[] 배열명 = new 자료형[칸수];
// new 자료형[칸수]; -> 주소값 ? 배열명이 주소값이니까.
	자료형[] 배열명;
//주소값이 없음
	자료형[] 배열명 = {값1, 값2, 값3, ...};

배열의 사용 이유
	1.여러 값들을 하나의 이름과 인덱스 번호(방번호)로 관리하기 위해서
	2.규칙성이 없는 값에 규칙성을 부여하기 위해서	
	String[] arStr={"정회윤", "꽃", "바지", "이순신", "자바"};

배열의 길이 
	배열명.length

배열의 사용
	배열명[index] = 값;	//저장공간
	배열명[index];		//값

2차원 배열
	배열 안에 배열
2차원 배열의 선언
	자료형[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = {{값1, 값2, 값3}, {값4, 값5, 값6}, ...}
	자료형[][] 배열명;

2차원 배열 생성 과정

	int[][] arrData = new int[2][3];

			arrData
		   	  [ ]
		arrDAta[0]    arrData[1]
		 	 [ ][ ]

		[ ][ ][ ]	[ ][ ][ ]

arrData[0][0]~arrData[0][2]	arrData[1][0]~arrData[1][2]

2중 for문(nested for문)
	for문 안에 for문
	바깥쪽 for문 : i for문
	안쪽 for문 : j for문
	i for문은 다음 반복으로 넘어가기 위해 안쪽에 있는 모든 코드를
	마쳐야 한다. 하지만 그안에는 j for문이 있기 때문에 j for문이
	모두 끝나야 i for문은 다음 반복으로 넘어갈 수 있다.

	2번 반복문 안에 3번 반복문이 있으면 안쪽 for문 안에 있는
	문장은 총 6번 반복
빠른 for문(forEach문, 향상된 for문)

	인덱스가 필요없고 단순하게 그 배열 안에 들어있는 값을 사용하기만 할때에는
	향상된 for문을 사용하면 편하다. 변수 자체가 배열 안에 있는 값1개씩
	순서대로 가져오게 된다.

	for(자료형 변수면 : 배열){

	}

	int[] arData = {10, 20, 30, 40, 50};
	for(int data : arData){
	syso(data);
	}
	//출력 : 10 20 30 40 50
	
메소드(기능을 관리)
	이름()
	단, 키워드 뒤의 ()는 메소드가 아니다.(for, while, ...)

	f	(x)	=	2x+1
    메소드 이름   매개변수		리턴값
	     연결해주는 변수

매개변수
	메소드 선언부와 메소드 사용부를 연결해주는 변수이다.
	f(x)=2x+1
	
메소드 선언
	①리턴타입 ②메소드명 (자료형 ③매개변수1, 자료형 매개변수2, ...) {
		④실행할 문장;
		⑤return 리턴값;
	}

	① 리턴의 값의 타입을 결정하는 부분(리턴값이 없다면 void로 작성한다.)
	② 동사형으로 작성한다.eat("바나나"), eat("딸기")
	③ 생략 가능, 생략할 시에는 외부에서 값을 전달받을수 없다.
	-여러값을 전달받아야 할때에는 ,로 구분하여 값의 갯수와 타입에 맞게 선언해준다.
	-사용시에는 매개변수의 타입과 갯수, 순서에 맞게 값을 전달해준다.
	④ 생략 가능
	⑤ 생략 가능























