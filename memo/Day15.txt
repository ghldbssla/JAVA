Factory pattern
	객체를 찍어내는 공장을 세워놓고
	특정한 값에 따라서 알맞은 객체를 찍어서 돌려주는 패턴
	(분업이 가능해지고 , main을 수정하지 않고 Factory를 수정하면됨-main의 흐름 안깨짐)

Single-ton Pattern
	객체를 마구잡이로 생성하는것이 아니라 전체 프로그램에서
	단 한개만 만들도록 설계하는 패턴 .데이터 보존이 가능하다.
	(반복문안에서의 생성자호출에 사용됨->본코드에서 new 객체화X)

MVC Model
	소프트웨어 설계시 사용되는 디자인 패턴
	model, view, controller의 줄임말

	Model : 테이터와 대응
	View : 보여지는 화면
	Controller : 흐름제어, 비즈니스 로직 담당
	
DAO(Data Access Object)
	데이터에 접근하기 위한 객체
	데이터들을 관리하는 여러 메소드들이 정의되어있는 객체(클래스)

DTO(Data Transfer Object) / VO(Value Object)
	양쪽으로 전송되어 오고가는 데이터 객체(클래스)
	데이터 포장 객체
MVC1
	View와 Controller가 함께 공존하는 모양
	장점 : 유지보수가 어느정도 편하고, 구현이 좀 더 간단하다.
	단점 : 완벽한 분업이 불가능하다.

	소규모, 중규모 프로젝트

MVC2
	View와 Controller가 완벽하게 분리되어 있는 모양
	장점 : 유지보수가 편하고, 분업이 쉬워진다.
	단점 : 구현이 어렵다.

	대규모 프로젝트








