추상 클래스(불완전한 클래스)
	추상적인 내용만 정의하고 있는 클래스
	하위클래스(자식 클래스)에서 구현하도록 설계된 클래스
	추상클래스(부모)는 클래스들(자식)의 공통 요소들을 가상화
	시켜놓기 때문에 객체화시 재정의(구현)를 해주어야 한다.
	부모 추상 클래스는 단지 자식클래스를 편하게 만들 수 있도록
	도와주는 역할을 한다. 따라서 자식 클래스에서 사용할 메소드의
	이름, 리턴타입, 매개변수 만 갖고있다. 즉, 메소드에 {}(바디)가 없다.
	이런 메소드를 추상 메소드라고 하며, 리턴타입 앞에 abstract를 
	붙여준다. 추상 메소드가 하나라도 클래스 내부에 존재한다면
	그러한 클래스를 추상 클래스라고 한다. 추상클래스도 앞에 abstract를 
	붙여준다.
	
추상 클래스 선언 
	abstract class 클래스명{
		abstract 리턴타입 추상메소드명();
		리턴타입 일반메소드명(){
			바디내용;
		}
	}
	추상 메소드는 자식 클래스에서 강제적으로 반드시 재정의 해야한다.(강제성)
	일반메소드도 추상클래스 내부에 선언할 수 있다.
----------------------------------------------------------------
인터페이스
	추상클래스를 고도화 시킨 문법이며, 반드시 추상메소드와 상수만 선언해야 한다.	
	*다중 지정 가능*

jdk 1.8버전 부터는 인터페이스에 default 일반 메소드 선언이 가능하기 때문에
사실상 다중 상속을 지원하게 된다. 만약 인터페이스들 끼리 모호성이 발생하면 
지정받은 클래스에서 재정의를 명시적으로 하여 문제를 해결한다.
부모클래스와 인터페이스간의 모호성이 발생하면 (명시적으로 하지 않으면)부모클래스의 메소드가 실행된다.

adapter 패턴
	인터페이스를 implements 받을시 모든 메소드를 구현(재정의) 해야한다.
	하지만 지정받은 클래스에서 원하는 메소드만 재정의 하고 싶다면
	중간에 adapter 클래스를 통해 빈 메소드로 재정의를 해 주고
	그 adapter를 상속받는 방식으로 처리할 수 있다. 이러한 패턴을
	adapter 패턴이라고한다.

Mark-interface
	인터페이스의 이름으로 지정받는 클래스에 표시하기 위한 인터페이스
	내부에는 아무런 기능을 정의 안해놓아도 되고 단순히 표식을 위해 사용한다.
-------------------------------------------------------------------------------
내부 클래스(inner class)
	클래스 내부에 클래스를 선언하여 외부 클래스의 필드 접근에 용이하다.
	내부 클래스의 객체를 생성하려면(필드를 사용하려면) 외부 클래스의 객체에서
	내부 클래스를 객체화 해야한다. 즉 외부 클래스의 객체가 우선적으로 필요하다.

	외부클래스명 객체명 = new 외부클래스생성자();
	외부클래스명.내부클래스명 객체명 = 외부클래스객체.new 내부클래스생성자();

사용하는 이유
	1.상속처럼 사용
		내부클래스 선언시 외부클래스의 필드를 마치 내것처럼 접근하여
		사용할 수가 있다.
	
	2.캡슐화
		외부클래스가 객체화 되지 않았다면 내부 클래스의 객체도 존재할 수 없다.
		다른 클래스에서 접근을 막기 위하여 내부클래스를 사용한다.

A클래스에서 B클래스에 있는 b 메소드를 자주 사용한다면, 상속을 받아야 한다.
그러려면 A클래스가 외부에 선언되어 있기 때문에 다른클래스에서 A클래스로 접근이 가능하다.
그럴때 B클래스 내부에 A클래스를 선언하여 내부 클래스로 사용한다.

내부 클래스는 GUI(Graphic User Interface) 개발시 많이 사용된다.
a버튼을 눌러야 b 버튼이 구현되게 하고 싶다면 클래스를 별도로 만들기보다 내부 클래스를
만들어 사용하는것이 적합하다.

익명클래스(Anonymous Inner Class)
	다음시간에


















