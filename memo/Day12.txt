익명클래스(Anonymous Inner Class)
	이름이 없는 클래스

예외처리(Exception)
	에러 : 심각한 오류	(컴퓨터가 다운되거나 불나는 것)
	예외 : 덜 심각한 오류	(빨간줄, 실행 안될 때)

try ~ catch ~ finally
	try{
		예외가 발생할 수 있는 문장
	}catch(예외이름1 객체명){
		예외1 발생시 실행할 문장
	}catch(예외이름2 객체명){
		예외2 발생시 실행할 문장
	}
	...
	finally{
		예외 발생 유무와 상관없이 무조건 실행할 문장
	}

Exception 클래스
	모든 예외클래스들의 부모 클래스
	예외처리시 exception 클래스로 잡게 되면 모든 예외를 잡을 수 있다.

throw
	예외 던지기
	예외를 발생시킬때 사용하는 키워드

	throw new 예외클래스();

throws
	메소드 선언시 내부에서 throw가 사용되었다면
	throws로 발생하는 예외들을 알려주어야 한다.

	리턴타입 메소드이름() throws 발생하는 예외1, 발생하는 예외2,...{
		...
		throw new 예외1();
		...
		throw new 예외2();
}

API( Application Programming Interface )
	응용 프로그램 프로그래밍 인터페이스

	자바 시스템을 제어하기 위해서 자바에서 제공하는 명령어들을 의미한다.
	선배 개발자들이 JAVA에서 코딩을 쉽게 할 수 있도록 만들어 놓은 것.

java.lang
	자바 프로그래밍을 위한 기본적인 패키지와 클래스 포함
java.util
	프로그램을 제어하기 위한 클래스와 데이터를 효율적으로 
	저장하기 위한 클래스 포함
java.io
	키보드, 모니터, 프린터, 파일 등을 제어할 수 있는 클래스 포함
java.net
	통신을 위한 기능이 있는 클래스 포함

http://docs.oracle.com/javase

API의 종류는 굉장히 많고 다양하기 때문에 모두 외우는 것은 절대 불가능하다.
그렇기 때문에 처음보는 API도 설명을 잘 읽고 맞는 목적으로 사용하는 것을
알아야 한다.

javadoc : 클래스, 메소드에 대한 도움말
JAVA API 문서에는 javadoc 프로그램으로 만들어진 문서라고 볼 수 있다.

어노테이션(@) 주석(설명)
/**
*
*/

@author : 개발자
@since : 릴리즈 기록
@version : 클래스의 버전
@param : 메소드의 매개변수
@return  : 메소드의 반환값
@throws : 메소드에서의 예외
@see : 다른 주제에 관한 링크 저장
@exception : 메소드에서의 예외 확인

주석을 작성해도 자동으로 javadoc 문서가 만들어지지는 않는다.


Object 클래스
	모든 클래스들의 상위(부모) 클래스

	equals	: 두 주소값이 같은지 확인하는 메소드
	== 	: 두 주소값이 같은지 확인하는 연산자 -- > hash값이 같은지 비교
	hashCode	: 해쉬값(주소값)






