메소드(기능을 관리)
	이름()
	단, 키워드 뒤의 ()는 메소드가 아니다.(for, while, ...)

	f	(x)	=	2x+1
    메소드 이름   매개변수		리턴값
	     연결해주는 변수

매개변수
	메소드 선언부와 메소드 사용부를 연결해주는 변수이다.
	f(x)=2x+1
	
메소드 선언
	①리턴타입 ②메소드명 (자료형 ③매개변수1, 자료형 매개변수2, ...) {
		④실행할 문장;
		⑤return 리턴값;
	}

	① 리턴의 값의 타입을 결정하는 부분(리턴값이 없다면 void로 작성한다.)
	② 동사형으로 작성한다.eat("바나나"), eat("딸기")
	③ 생략 가능, 생략할 시에는 외부에서 값을 전달받을수 없다.
	-여러값을 전달받아야 할때에는 ,로 구분하여 값의 갯수와 타입에 맞게 선언해준다.
	-사용시에는 매개변수의 타입과 갯수, 순서에 맞게 값을 전달해준다.
	④ 생략 가능
	⑤ 생략 가능
---------------------------------------------------------------------------------
**Ctrl + 메소드 = 정의되어있는 곳으로 이동
  기본 세팅 메소드의 경로는 버튼을 누르고 밑에것으로 java-jdk-src압축파일을 누르면 된다.

메소드 선언 순서
	ex) 두 정수의 덧셈 메소드

	1.메소드 명을 생삿한다.(동사형)
		void add(){ }
	2.매개변수를 생각한다.
		void add(int num1, int num2){ }
	3.실행할 문장을 생각한다.
		void add(int num1, int num2){
			System.out.println("두 정수의 덧셈 메소드");
			result=num1+num2;
		}
	4.리턴값을 생각한다.
		void add(int num1, int num2){
			System.out.println("두 정수의 덧셈 메소드");
			result=num1+num2;
			return result;
		}
	5.리턴타입을 결정한다.
		int add(int num1, int num2){
			System.out.println("두 정수의 덧셈 메소드");
			result=num1+num2;
			return result;
		}

메소드 사용
	1.메소드명();
	2.메소드명(값1, 값2, ..);

	1번 같은 경우에는 값을 전달할 수가 없다. 값을 전달하려면 매개변수가 필요하다.
	리턴값이 있다면 사용한 부분 통채로를 그 리턴값으로 보아야 한다. 
	단, 리턴값이 없다면 절대 값으로 봐서는 안된다.(println)

메소드 주의사항
	1.클래스 영역 밖셍서 선성, 사용 불가
	2.메소드 영역 안에서 선언 불가
	3.메소드 영역 밖에서 사용 불가

리턴을 사용해야 할 때 
	메소드에서 모든 기능이 구현되지 않을 때
	사용하는 부분에서 아직 할 작업이 남았을 때
	메소드 기능 결과를 사용하는 부분에 알려주어야 할 때
	메소드 내부에서 진행을 종료시킬 때

리턴을 사용하지 않아도 될 때
	메소드에서 모든 기능이 구현될 때

메소드의 사용 목적
	1. 반복되는 기능을 쉽게 관리하기 위해서
		재사용의 목적이 있기 때문에 절대 특정성을 부여해서는 안된다.
	2. 소스코드 간결화

Storage Class(저장 기억 부류)

	지역 변수 : 메소드 영역 안에 있는 변수
	전역 변수 : 메소드 영역 밖, 클래스영역 안에 있는 변수
	정적 변수 : static이 붙은 변수
	
	※static이 붙은 메소드 안에서는 전역변수를 사용할 수가 없다.(정적변수는 사용 가능)

	Heap영역 : 컴퓨터가 할당을 해주는 공간, 주소값만 존재하는 공간
		(우리가 명칭을 붙일수가 없는 공간)
		ex) 실제 값이 담긴 배열, 객체의 필드

		Stack영역 		   Data영역 		

		지역변수			전역변수, 정적변수		

초기화		직접(무조건)		      자동

생명주기(스코프)	}			  프로그램 종료시	

보안성		상			중	     하


















